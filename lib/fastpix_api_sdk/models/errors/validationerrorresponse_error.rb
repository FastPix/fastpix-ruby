# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module FastpixApiSDK
  module Models
    module Errors
    
      # Returns the problem that has occured
      class ValidationErrorResponseError
        extend T::Sig
        include Crystalline::MetadataFields

        # An error code indicating the type of the error.
        field :code, T.nilable(::Integer), { 'format_json': { 'letter_case': ::FastpixApiSDK::Utils.field_name('code') } }
        # A descriptive message providing more details for the error
        field :message, T.nilable(::String), { 'format_json': { 'letter_case': ::FastpixApiSDK::Utils.field_name('message') } }
        # It is an array of objects, where each object contains information about a specific field and a corresponding error message.
        field :fields_, T.nilable(T::Array[Models::Errors::Field]), { 'format_json': { 'letter_case': ::FastpixApiSDK::Utils.field_name('fields') } }

        sig { params(code: T.nilable(::Integer), message: T.nilable(::String), fields_: T.nilable(T::Array[Models::Errors::Field])).void }
        def initialize(code: nil, message: nil, fields_: nil)
          @code = code
          @message = message
          @fields_ = fields_
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @code == other.code
          return false unless @message == other.message
          return false unless @fields_ == other.fields_
          true
        end
      end
    end
  end
end
