# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module FastpixApiSDK
  module Models
    module Operations
    
      # Request body for direct upload
      class DirectUploadVideoMediaRequest
        extend T::Sig
        include Crystalline::MetadataFields

        # Upload media directly from a device using the URL name or enter '*' to allow all.
        field :cors_origin, ::String, { 'format_json': { 'letter_case': ::FastpixApiSDK::Utils.field_name('corsOrigin'), required: true } }
        # Configuration settings for media upload.
        field :push_media_settings, T.nilable(Models::Operations::PushMediaSettings), { 'format_json': { 'letter_case': ::FastpixApiSDK::Utils.field_name('pushMediaSettings') } }

        sig { params(cors_origin: ::String, push_media_settings: T.nilable(Models::Operations::PushMediaSettings)).void }
        def initialize(cors_origin:, push_media_settings: nil)
          @cors_origin = cors_origin
          @push_media_settings = push_media_settings
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @cors_origin == other.cors_origin
          return false unless @push_media_settings == other.push_media_settings
          true
        end
      end
    end
  end
end
