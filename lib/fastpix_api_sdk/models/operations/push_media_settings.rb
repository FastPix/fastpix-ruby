# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module FastpixApiSDK
  module Models
    module Operations
    
      # Configuration settings for media upload.
      class PushMediaSettings
        extend T::Sig
        include Crystalline::MetadataFields

        # Determines if access to the streamed content is kept private or available to all.
        field :access_policy, Models::Operations::DirectUploadVideoMediaAccessPolicy, { 'format_json': { 'letter_case': ::FastpixApiSDK::Utils.field_name('accessPolicy'), required: true, 'decoder': Utils.enum_from_string(Models::Operations::DirectUploadVideoMediaAccessPolicy, false) } }
        # Start time indicates where encoding should begin within the video file, in seconds.
        field :start_time, T.nilable(::Float), { 'format_json': { 'letter_case': ::FastpixApiSDK::Utils.field_name('startTime') } }
        # End time indicates where encoding should end within the video file, in seconds.
        field :end_time, T.nilable(::Float), { 'format_json': { 'letter_case': ::FastpixApiSDK::Utils.field_name('endTime') } }

        field :inputs, T.nilable(T::Array[T.any(Models::Components::VideoInput, Models::Components::WatermarkInput, Models::Components::AudioInput, Models::Components::SubtitleInput)]), { 'format_json': { 'letter_case': ::FastpixApiSDK::Utils.field_name('inputs') } }
        # Tag a video in "key" : "value" pairs for searchable metadata. Maximum 10 entries, 255 characters each.
        field :metadata, T.nilable(Models::Operations::DirectUploadVideoMediaMetadata), { 'format_json': { 'letter_case': ::FastpixApiSDK::Utils.field_name('metadata') } }
        # Generates subtitle files for audio/video files.
        # 
        field :subtitles, T.nilable(Models::Operations::Subtitles), { 'format_json': { 'letter_case': ::FastpixApiSDK::Utils.field_name('subtitles') } }
        # The sourceAccess parameter determines whether the original media file is accessible. Set to true to enable access or false to restrict it
        field :source_access, T.nilable(T::Boolean), { 'format_json': { 'letter_case': ::FastpixApiSDK::Utils.field_name('sourceAccess') } }
        # Generates MP4 video up to 4K ("capped_4k"), m4a audio only ("audioOnly"), or both for offline viewing.
        # 
        field :mp4_support, T.nilable(Models::Operations::Mp4Support), { 'format_json': { 'letter_case': ::FastpixApiSDK::Utils.field_name('mp4Support'), 'decoder': Utils.enum_from_string(Models::Operations::Mp4Support, true) } }

        field :summary, T.nilable(Models::Operations::Summary), { 'format_json': { 'letter_case': ::FastpixApiSDK::Utils.field_name('summary') } }
        # Enable or disable the chapters feature for the media. Set to `true` to enable chapters or `false` to disable.
        # 
        field :chapters, T.nilable(T::Boolean), { 'format_json': { 'letter_case': ::FastpixApiSDK::Utils.field_name('chapters') } }
        # Enable or disable named entity extraction. Set to `true` to enable or `false` to disable.
        # 
        field :named_entities, T.nilable(T::Boolean), { 'format_json': { 'letter_case': ::FastpixApiSDK::Utils.field_name('namedEntities') } }

        field :moderation, T.nilable(Models::Operations::Moderation), { 'format_json': { 'letter_case': ::FastpixApiSDK::Utils.field_name('moderation') } }

        field :access_restrictions, T.nilable(Models::Operations::DirectUploadVideoMediaAccessRestrictions), { 'format_json': { 'letter_case': ::FastpixApiSDK::Utils.field_name('accessRestrictions') } }
        # Enhance the quality and volume of the audio track. This is available for pre-recorded content only.
        # 
        field :optimize_audio, T.nilable(T::Boolean), { 'format_json': { 'letter_case': ::FastpixApiSDK::Utils.field_name('optimizeAudio') } }
        # Determines the highest quality resolution available.
        # 
        field :max_resolution, T.nilable(Models::Operations::MaxResolution), { 'format_json': { 'letter_case': ::FastpixApiSDK::Utils.field_name('maxResolution'), 'decoder': Utils.enum_from_string(Models::Operations::MaxResolution, true) } }

        sig { params(access_policy: Models::Operations::DirectUploadVideoMediaAccessPolicy, start_time: T.nilable(::Float), end_time: T.nilable(::Float), inputs: T.nilable(T::Array[T.any(Models::Components::VideoInput, Models::Components::WatermarkInput, Models::Components::AudioInput, Models::Components::SubtitleInput)]), metadata: T.nilable(Models::Operations::DirectUploadVideoMediaMetadata), subtitles: T.nilable(Models::Operations::Subtitles), source_access: T.nilable(T::Boolean), mp4_support: T.nilable(Models::Operations::Mp4Support), summary: T.nilable(Models::Operations::Summary), chapters: T.nilable(T::Boolean), named_entities: T.nilable(T::Boolean), moderation: T.nilable(Models::Operations::Moderation), access_restrictions: T.nilable(Models::Operations::DirectUploadVideoMediaAccessRestrictions), optimize_audio: T.nilable(T::Boolean), max_resolution: T.nilable(Models::Operations::MaxResolution)).void }
        def initialize(access_policy:, start_time: nil, end_time: nil, inputs: nil, metadata: nil, subtitles: nil, source_access: nil, mp4_support: nil, summary: nil, chapters: nil, named_entities: nil, moderation: nil, access_restrictions: nil, optimize_audio: true, max_resolution: Models::Operations::MaxResolution::ONE_THOUSAND_AND_EIGHTYP)
          @access_policy = access_policy
          @start_time = start_time
          @end_time = end_time
          @inputs = inputs
          @metadata = metadata
          @subtitles = subtitles
          @source_access = source_access
          @mp4_support = mp4_support
          @summary = summary
          @chapters = chapters
          @named_entities = named_entities
          @moderation = moderation
          @access_restrictions = access_restrictions
          @optimize_audio = optimize_audio
          @max_resolution = max_resolution
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @access_policy == other.access_policy
          return false unless @start_time == other.start_time
          return false unless @end_time == other.end_time
          return false unless @inputs == other.inputs
          return false unless @metadata == other.metadata
          return false unless @subtitles == other.subtitles
          return false unless @source_access == other.source_access
          return false unless @mp4_support == other.mp4_support
          return false unless @summary == other.summary
          return false unless @chapters == other.chapters
          return false unless @named_entities == other.named_entities
          return false unless @moderation == other.moderation
          return false unless @access_restrictions == other.access_restrictions
          return false unless @optimize_audio == other.optimize_audio
          return false unless @max_resolution == other.max_resolution
          true
        end
      end
    end
  end
end
