# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module FastpixApiSDK
  module Models
    module Operations
    
      # Request body for creating playback id for an media
      class CreateMediaPlaybackIdRequestBody
        extend T::Sig
        include Crystalline::MetadataFields

        # Determines if access to the streamed content is kept private or available to all.
        field :access_policy, Models::Operations::CreateMediaPlaybackIdAccessPolicy, { 'format_json': { 'letter_case': ::FastpixApiSDK::Utils.field_name('accessPolicy'), required: true, 'decoder': Utils.enum_from_string(Models::Operations::CreateMediaPlaybackIdAccessPolicy, false) } }

        field :access_restrictions, T.nilable(Models::Operations::CreateMediaPlaybackIdAccessRestrictions), { 'format_json': { 'letter_case': ::FastpixApiSDK::Utils.field_name('accessRestrictions') } }

        sig { params(access_policy: Models::Operations::CreateMediaPlaybackIdAccessPolicy, access_restrictions: T.nilable(Models::Operations::CreateMediaPlaybackIdAccessRestrictions)).void }
        def initialize(access_policy:, access_restrictions: nil)
          @access_policy = access_policy
          @access_restrictions = access_restrictions
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @access_policy == other.access_policy
          return false unless @access_restrictions == other.access_restrictions
          true
        end
      end
    end
  end
end
