# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module FastpixApiSDK
  module Models
    module Components
    

      class Media
        extend T::Sig
        include Crystalline::MetadataFields

        # A video thumbnail is a still image that acts as the preview image for your video.
        field :thumbnail, T.nilable(::String), { 'format_json': { 'letter_case': ::FastpixApiSDK::Utils.field_name('thumbnail') } }
        # When creating the media, FastPix assigns a universally unique identifier with a maximum length of 255 characters.
        field :id, T.nilable(::String), { 'format_json': { 'letter_case': ::FastpixApiSDK::Utils.field_name('id') } }
        # A unique identifier is generated by FastPix for the workspace.
        field :workspace_id, T.nilable(::String), { 'format_json': { 'letter_case': ::FastpixApiSDK::Utils.field_name('workspaceId') } }
        # You can search for videos with specific key value pairs using metadata, when you tag a video in "key" : "value" pairs. Dynamic Metadata allows you to define a key that allows any value pair. You can have maximum of 255 characters and upto 10 entries are allowed.
        field :metadata, T.nilable(Models::Components::MediaMetadata), { 'format_json': { 'letter_case': ::FastpixApiSDK::Utils.field_name('metadata') } }
        # Determines the media's status, which can be one of the possible values.
        field :status, T.nilable(::String), { 'format_json': { 'letter_case': ::FastpixApiSDK::Utils.field_name('status') } }
        # Determines the type of MP4 support for the media.   - **none**: Disables MP4 support.   - **capped_4k**: Enables MP4 downloads with resolutions up to 4K.   - **audioOnly**: Provides an MP4 stream containing only the audio.   - **audioOnly,capped_4k**: Enables both MP4 video downloads (up to 4K) and an audio-only stream.
        field :mp4_support, T.nilable(Models::Components::MediaMp4Support), { 'format_json': { 'letter_case': ::FastpixApiSDK::Utils.field_name('mp4Support'), 'decoder': Utils.enum_from_string(Models::Components::MediaMp4Support, true) } }
        # The sourceAccess parameter determines whether the original media file is accessible. Set to true to enable access or false to restrict it
        field :source_access, T.nilable(T::Boolean), { 'format_json': { 'letter_case': ::FastpixApiSDK::Utils.field_name('sourceAccess') } }
        # A collection of Playback ID objects utilized for crafting HLS playback URLs.
        field :playback_ids, T.nilable(T::Array[Models::Components::PlaybackId]), { 'format_json': { 'letter_case': ::FastpixApiSDK::Utils.field_name('playbackIds') } }
        # A media consists of different media tracks, like video, audio, and subtitle, all combined.
        field :tracks, T.nilable(T::Array[Models::Components::Track]), { 'format_json': { 'letter_case': ::FastpixApiSDK::Utils.field_name('tracks') } }
        # The time span of the media, measured in seconds with a maximum allowable duration of 12 hours per individual media.
        field :duration, T.nilable(::String), { 'format_json': { 'letter_case': ::FastpixApiSDK::Utils.field_name('duration') } }
        # Frame rate quantifies the speed at which frames are displayed per second. It represents the range of frames available for a specific track. If the frame rate of the input file is indeterminable, it will be indicated by a value of -1.
        field :frame_rate, T.nilable(::String), { 'format_json': { 'letter_case': ::FastpixApiSDK::Utils.field_name('frameRate') } }
        # The aspect ratio of a video is a value that describes the relative shape of a video based on its width and height.
        field :aspect_ratio, T.nilable(::String), { 'format_json': { 'letter_case': ::FastpixApiSDK::Utils.field_name('aspectRatio') } }
        # Time the media was created, defined as a localDateTime (UTC Time).
        field :created_at, T.nilable(::DateTime), { 'format_json': { 'letter_case': ::FastpixApiSDK::Utils.field_name('createdAt'), 'decoder': Utils.datetime_from_iso_format(true) } }
        # Time the media was updated, defined as a localDateTime (UTC Time).
        field :updated_at, T.nilable(::DateTime), { 'format_json': { 'letter_case': ::FastpixApiSDK::Utils.field_name('updatedAt'), 'decoder': Utils.datetime_from_iso_format(true) } }
        # The maximum resolution specified by the user for the media.
        field :max_resolution, T.nilable(Models::Components::MediaMaxResolution), { 'format_json': { 'letter_case': ::FastpixApiSDK::Utils.field_name('maxResolution'), 'decoder': Utils.enum_from_string(Models::Components::MediaMaxResolution, true) } }
        # The actual resolution of the uploaded media. This represents the native quality of the source media.
        field :source_resolution, T.nilable(Models::Components::SourceResolution), { 'format_json': { 'letter_case': ::FastpixApiSDK::Utils.field_name('sourceResolution'), 'decoder': Utils.enum_from_string(Models::Components::SourceResolution, true) } }

        sig { params(thumbnail: T.nilable(::String), id: T.nilable(::String), workspace_id: T.nilable(::String), metadata: T.nilable(Models::Components::MediaMetadata), status: T.nilable(::String), mp4_support: T.nilable(Models::Components::MediaMp4Support), source_access: T.nilable(T::Boolean), playback_ids: T.nilable(T::Array[Models::Components::PlaybackId]), tracks: T.nilable(T::Array[Models::Components::Track]), duration: T.nilable(::String), frame_rate: T.nilable(::String), aspect_ratio: T.nilable(::String), created_at: T.nilable(::DateTime), updated_at: T.nilable(::DateTime), max_resolution: T.nilable(Models::Components::MediaMaxResolution), source_resolution: T.nilable(Models::Components::SourceResolution)).void }
        def initialize(thumbnail: nil, id: nil, workspace_id: nil, metadata: nil, status: nil, mp4_support: nil, source_access: nil, playback_ids: nil, tracks: nil, duration: nil, frame_rate: nil, aspect_ratio: nil, created_at: nil, updated_at: nil, max_resolution: Models::Components::MediaMaxResolution::ONE_THOUSAND_AND_EIGHTYP, source_resolution: Models::Components::SourceResolution::ONE_THOUSAND_AND_EIGHTYP)
          @thumbnail = thumbnail
          @id = id
          @workspace_id = workspace_id
          @metadata = metadata
          @status = status
          @mp4_support = mp4_support
          @source_access = source_access
          @playback_ids = playback_ids
          @tracks = tracks
          @duration = duration
          @frame_rate = frame_rate
          @aspect_ratio = aspect_ratio
          @created_at = created_at
          @updated_at = updated_at
          @max_resolution = max_resolution
          @source_resolution = source_resolution
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @thumbnail == other.thumbnail
          return false unless @id == other.id
          return false unless @workspace_id == other.workspace_id
          return false unless @metadata == other.metadata
          return false unless @status == other.status
          return false unless @mp4_support == other.mp4_support
          return false unless @source_access == other.source_access
          return false unless @playback_ids == other.playback_ids
          return false unless @tracks == other.tracks
          return false unless @duration == other.duration
          return false unless @frame_rate == other.frame_rate
          return false unless @aspect_ratio == other.aspect_ratio
          return false unless @created_at == other.created_at
          return false unless @updated_at == other.updated_at
          return false unless @max_resolution == other.max_resolution
          return false unless @source_resolution == other.source_resolution
          true
        end
      end
    end
  end
end
