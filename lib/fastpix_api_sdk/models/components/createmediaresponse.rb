# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module FastpixApiSDK
  module Models
    module Components
    

      class CreateMediaResponse
        extend T::Sig
        include Crystalline::MetadataFields

        # The Media is assigned a universal unique identifier, which can contain a maximum of 255 characters.
        field :id, T.nilable(::String), { 'format_json': { 'letter_case': ::FastpixApiSDK::Utils.field_name('id') } }
        # Determines the media's status, which can be one of the possible values.
        field :status, T.nilable(::String), { 'format_json': { 'letter_case': ::FastpixApiSDK::Utils.field_name('status') } }
        # Time the media was created, defined as a localDateTime (UTC Time).
        field :created_at, T.nilable(::DateTime), { 'format_json': { 'letter_case': ::FastpixApiSDK::Utils.field_name('createdAt'), 'decoder': Utils.datetime_from_iso_format(true) } }
        # Time the media was updated, defined as a localDateTime (UTC Time).
        field :updated_at, T.nilable(::DateTime), { 'format_json': { 'letter_case': ::FastpixApiSDK::Utils.field_name('updatedAt'), 'decoder': Utils.datetime_from_iso_format(true) } }
        # A collection of Playback ID objects utilized for crafting HLS playback URLs.
        field :playback_ids, T.nilable(T::Array[Models::Components::PlaybackId]), { 'format_json': { 'letter_case': ::FastpixApiSDK::Utils.field_name('playbackIds') } }
        # You can search for videos with specific key value pairs using metadata, when you tag a video in "key" : "value" pairs. Dynamic Metadata allows you to define a key that allows any value pair. You can have maximum of 255 characters and upto 10 entries are allowed.
        field :metadata, T.nilable(Models::Components::CreateMediaResponseMetadata), { 'format_json': { 'letter_case': ::FastpixApiSDK::Utils.field_name('metadata') } }
        # FastPix allows for a free trial. Create as many media files as you like during the trial period. Remember, each clip can only be 10 seconds long and will be deleted after 24 hours. Also, all trial content will have the FastPix logo watermark.
        # 
        field :trial, T.nilable(T::Boolean), { 'format_json': { 'letter_case': ::FastpixApiSDK::Utils.field_name('trial') } }
        # The maximum resolution tier determines the highest quality your media will be available in.
        field :max_resolution, T.nilable(Models::Components::CreateMediaResponseMaxResolution), { 'format_json': { 'letter_case': ::FastpixApiSDK::Utils.field_name('maxResolution'), 'decoder': Utils.enum_from_string(Models::Components::CreateMediaResponseMaxResolution, true) } }

        sig { params(id: T.nilable(::String), status: T.nilable(::String), created_at: T.nilable(::DateTime), updated_at: T.nilable(::DateTime), playback_ids: T.nilable(T::Array[Models::Components::PlaybackId]), metadata: T.nilable(Models::Components::CreateMediaResponseMetadata), trial: T.nilable(T::Boolean), max_resolution: T.nilable(Models::Components::CreateMediaResponseMaxResolution)).void }
        def initialize(id: nil, status: nil, created_at: nil, updated_at: nil, playback_ids: nil, metadata: nil, trial: true, max_resolution: Models::Components::CreateMediaResponseMaxResolution::ONE_THOUSAND_AND_EIGHTYP)
          @id = id
          @status = status
          @created_at = created_at
          @updated_at = updated_at
          @playback_ids = playback_ids
          @metadata = metadata
          @trial = trial
          @max_resolution = max_resolution
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @id == other.id
          return false unless @status == other.status
          return false unless @created_at == other.created_at
          return false unless @updated_at == other.updated_at
          return false unless @playback_ids == other.playback_ids
          return false unless @metadata == other.metadata
          return false unless @trial == other.trial
          return false unless @max_resolution == other.max_resolution
          true
        end
      end
    end
  end
end
