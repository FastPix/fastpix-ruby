# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module FastpixApiSDK
  module Models
    module Components
    

      class ImposeTrack
        extend T::Sig
        include Crystalline::MetadataFields

        # URL of the audio track to impose on the video.
        field :url, T.nilable(::String), { 'format_json': { 'letter_case': ::FastpixApiSDK::Utils.field_name('url') } }
        # Start time (in seconds) of the imposed audio in the video.
        field :start_time, T.nilable(::Integer), { 'format_json': { 'letter_case': ::FastpixApiSDK::Utils.field_name('startTime') } }
        # End time (in seconds) of the imposed audio in the video.
        field :end_time, T.nilable(::Integer), { 'format_json': { 'letter_case': ::FastpixApiSDK::Utils.field_name('endTime') } }
        # Level of fade-in effect (in seconds) at the start of the imposed audio.
        field :fade_in_level, T.nilable(::Integer), { 'format_json': { 'letter_case': ::FastpixApiSDK::Utils.field_name('fadeInLevel') } }
        # Level of fade-out effect (in seconds) at the end of the imposed audio.
        field :fade_out_level, T.nilable(::Integer), { 'format_json': { 'letter_case': ::FastpixApiSDK::Utils.field_name('fadeOutLevel') } }

        sig { params(url: T.nilable(::String), start_time: T.nilable(::Integer), end_time: T.nilable(::Integer), fade_in_level: T.nilable(::Integer), fade_out_level: T.nilable(::Integer)).void }
        def initialize(url: nil, start_time: nil, end_time: nil, fade_in_level: nil, fade_out_level: nil)
          @url = url
          @start_time = start_time
          @end_time = end_time
          @fade_in_level = fade_in_level
          @fade_out_level = fade_out_level
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @url == other.url
          return false unless @start_time == other.start_time
          return false unless @end_time == other.end_time
          return false unless @fade_in_level == other.fade_in_level
          return false unless @fade_out_level == other.fade_out_level
          true
        end
      end
    end
  end
end
