# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module FastpixApiSDK
  module Models
    module Components
    
      # A collection of Playback ID objects utilized for crafting HLS playback urls.
      class PlaybackId
        extend T::Sig
        include Crystalline::MetadataFields

        # A unique identifier is generated by FastPix for the playbacks.
        field :id, T.nilable(::String), { 'format_json': { 'letter_case': ::FastpixApiSDK::Utils.field_name('id') } }
        # Determines if access to the streamed content is kept private or available to all.
        field :access_policy, T.nilable(Models::Components::PlaybackIdAccessPolicy), { 'format_json': { 'letter_case': ::FastpixApiSDK::Utils.field_name('accessPolicy'), 'decoder': Utils.enum_from_string(Models::Components::PlaybackIdAccessPolicy, true) } }
        # Controls access based on domains and user agents. Defines a default policy (either "allow" or "deny") and provides lists for explicitly allowed or denied domains and user agents.
        field :access_restrictions, T.nilable(Models::Components::PlaybackIdAccessRestrictions), { 'format_json': { 'letter_case': ::FastpixApiSDK::Utils.field_name('accessRestrictions') } }

        sig { params(id: T.nilable(::String), access_policy: T.nilable(Models::Components::PlaybackIdAccessPolicy), access_restrictions: T.nilable(Models::Components::PlaybackIdAccessRestrictions)).void }
        def initialize(id: nil, access_policy: nil, access_restrictions: nil)
          @id = id
          @access_policy = access_policy
          @access_restrictions = access_restrictions
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @id == other.id
          return false unless @access_policy == other.access_policy
          return false unless @access_restrictions == other.access_restrictions
          true
        end
      end
    end
  end
end
