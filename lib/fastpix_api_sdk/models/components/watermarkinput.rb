# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module FastpixApiSDK
  module Models
    module Components
    

      class WatermarkInput
        extend T::Sig
        include Crystalline::MetadataFields

        # Type of overlay (currently only supports 'watermark').
        field :type, T.nilable(Models::Components::WatermarkInputType), { 'format_json': { 'letter_case': ::FastpixApiSDK::Utils.field_name('type'), 'decoder': Utils.enum_from_string(Models::Components::WatermarkInputType, true) } }
        # URL of the watermark image.
        field :url, T.nilable(::String), { 'format_json': { 'letter_case': ::FastpixApiSDK::Utils.field_name('url') } }

        field :placement, T.nilable(Models::Components::Placement), { 'format_json': { 'letter_case': ::FastpixApiSDK::Utils.field_name('placement') } }
        # Width of the watermark in percentage or pixels.
        field :width, T.nilable(::String), { 'format_json': { 'letter_case': ::FastpixApiSDK::Utils.field_name('width') } }
        # Height of the watermark in percentage or pixels.
        field :height, T.nilable(::String), { 'format_json': { 'letter_case': ::FastpixApiSDK::Utils.field_name('height') } }
        # Opacity of the watermark in percentage.
        field :opacity, T.nilable(::String), { 'format_json': { 'letter_case': ::FastpixApiSDK::Utils.field_name('opacity') } }

        sig { params(type: T.nilable(Models::Components::WatermarkInputType), url: T.nilable(::String), placement: T.nilable(Models::Components::Placement), width: T.nilable(::String), height: T.nilable(::String), opacity: T.nilable(::String)).void }
        def initialize(type: nil, url: nil, placement: nil, width: nil, height: nil, opacity: nil)
          @type = type
          @url = url
          @placement = placement
          @width = width
          @height = height
          @opacity = opacity
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @type == other.type
          return false unless @url == other.url
          return false unless @placement == other.placement
          return false unless @width == other.width
          return false unless @height == other.height
          return false unless @opacity == other.opacity
          true
        end
      end
    end
  end
end
