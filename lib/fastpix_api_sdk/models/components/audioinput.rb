# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module FastpixApiSDK
  module Models
    module Components
    

      class AudioInput
        extend T::Sig
        include Crystalline::MetadataFields

        # Type of overlay (currently only supports 'audio').
        field :type, T.nilable(Models::Components::AudioInputType), { 'format_json': { 'letter_case': ::FastpixApiSDK::Utils.field_name('type'), 'decoder': Utils.enum_from_string(Models::Components::AudioInputType, true) } }
        # URL of the audio track to replace the existing audio in the video.
        field :swap_track_url, T.nilable(::String), { 'format_json': { 'letter_case': ::FastpixApiSDK::Utils.field_name('swapTrackUrl') } }
        # List of additional audio tracks to overlay on the video.
        field :impose_tracks, T.nilable(T::Array[Models::Components::ImposeTrack]), { 'format_json': { 'letter_case': ::FastpixApiSDK::Utils.field_name('imposeTracks') } }

        sig { params(type: T.nilable(Models::Components::AudioInputType), swap_track_url: T.nilable(::String), impose_tracks: T.nilable(T::Array[Models::Components::ImposeTrack])).void }
        def initialize(type: nil, swap_track_url: nil, impose_tracks: nil)
          @type = type
          @swap_track_url = swap_track_url
          @impose_tracks = impose_tracks
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @type == other.type
          return false unless @swap_track_url == other.swap_track_url
          return false unless @impose_tracks == other.impose_tracks
          true
        end
      end
    end
  end
end
