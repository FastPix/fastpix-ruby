# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module FastpixApiSDK
  module Models
    module Components
    

      class Placement
        extend T::Sig
        include Crystalline::MetadataFields

        # Horizontal alignment of the watermark.
        field :x_align, T.nilable(Models::Components::XAlign), { 'format_json': { 'letter_case': ::FastpixApiSDK::Utils.field_name('xAlign'), 'decoder': Utils.enum_from_string(Models::Components::XAlign, true) } }
        # Horizontal margin from the edge of the video.
        field :x_margin, T.nilable(::String), { 'format_json': { 'letter_case': ::FastpixApiSDK::Utils.field_name('xMargin') } }
        # Vertical alignment of the watermark.
        field :y_align, T.nilable(Models::Components::YAlign), { 'format_json': { 'letter_case': ::FastpixApiSDK::Utils.field_name('yAlign'), 'decoder': Utils.enum_from_string(Models::Components::YAlign, true) } }
        # Vertical margin from the edge of the video.
        field :y_margin, T.nilable(::String), { 'format_json': { 'letter_case': ::FastpixApiSDK::Utils.field_name('yMargin') } }

        sig { params(x_align: T.nilable(Models::Components::XAlign), x_margin: T.nilable(::String), y_align: T.nilable(Models::Components::YAlign), y_margin: T.nilable(::String)).void }
        def initialize(x_align: nil, x_margin: nil, y_align: nil, y_margin: nil)
          @x_align = x_align
          @x_margin = x_margin
          @y_align = y_align
          @y_margin = y_margin
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @x_align == other.x_align
          return false unless @x_margin == other.x_margin
          return false unless @y_align == other.y_align
          return false unless @y_margin == other.y_margin
          true
        end
      end
    end
  end
end
