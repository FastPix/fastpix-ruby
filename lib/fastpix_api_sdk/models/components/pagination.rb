# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module FastpixApiSDK
  module Models
    module Components
    
      # Pagination organizes content into pages for better readability and navigation.
      class Pagination
        extend T::Sig
        include Crystalline::MetadataFields

        # It gives the total number of media assets that are accessible overall.
        field :total_records, T.nilable(::Integer), { 'format_json': { 'letter_case': ::FastpixApiSDK::Utils.field_name('totalRecords') } }
        # Determines the current point for data retrieval within a paginated list.
        field :current_offset, T.nilable(::Integer), { 'format_json': { 'letter_case': ::FastpixApiSDK::Utils.field_name('currentOffset') } }
        # The offset count is expressed as total records by limit.
        field :offset_count, T.nilable(::Integer), { 'format_json': { 'letter_case': ::FastpixApiSDK::Utils.field_name('offsetCount') } }

        sig { params(total_records: T.nilable(::Integer), current_offset: T.nilable(::Integer), offset_count: T.nilable(::Integer)).void }
        def initialize(total_records: nil, current_offset: nil, offset_count: nil)
          @total_records = total_records
          @current_offset = current_offset
          @offset_count = offset_count
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @total_records == other.total_records
          return false unless @current_offset == other.current_offset
          return false unless @offset_count == other.offset_count
          true
        end
      end
    end
  end
end
